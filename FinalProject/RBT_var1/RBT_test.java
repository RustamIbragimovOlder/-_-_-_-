// Необходимо превратить собранное на семинаре дерево поиска
// в полноценное левостороннее красно-черное дерево.
// И реализовать в нем метод добавления новых элементов с балансировкой.

// Красно-черное дерево имеет следующие критерии:
// • Каждая нода имеет цвет (красный или черный)
// • Корень дерева всегда черный
// • Новая нода всегда красная
// • Красные ноды могут быть только левым ребенком
// • У краной ноды все дети черного цвета

// Соответственно, чтобы данные условия выполнялись,
// после добавления элемента в дерево необходимо произвести балансировку,
// благодаря которой все критерии выше станут валидными.
// Для балансировки существует 3 операции:
// – левый малый поворот, 
// – правый малый поворот, 
// – смена цвета.

package FinalProject.RBT_var1;

public class RBT_test {
    public static void main(String[] args) {
        RB_Tree<Integer> rbt = new RB_Tree<Integer>();
        rbt.insert(78);
        rbt.insert(14);
        rbt.insert(12);
        rbt.insert(4);
        rbt.insert(7);
        rbt.insert(90);
        rbt.insert(24);
        rbt.insert(1);
        
        rbt.inOrder();
    }

}
